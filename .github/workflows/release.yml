name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write # Nécessaire pour créer des releases

jobs:
  build-release:
    name: Build Release - ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-amd64
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-amd64
            suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            name: darwin-amd64
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            name: darwin-arm64
            suffix: ""

    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target ${{ matrix.platform.target }}

      - name: Prepare archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.platform.target }}/release/nebulis${{ matrix.platform.suffix }}" "dist/nebulis-${{ matrix.platform.name }}${{ matrix.platform.suffix }}"
          else
            cp "target/${{ matrix.platform.target }}/release/nebulis${{ matrix.platform.suffix }}" "dist/nebulis-${{ matrix.platform.name }}${{ matrix.platform.suffix }}"
          fi
          cp README.md LICENSE dist/
          cd dist
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            7z a "../nebulis-${{ matrix.platform.name }}.zip" .
          else
            tar czf "../nebulis-${{ matrix.platform.name }}.tar.gz" .
          fi

      - name: Generate SHA-256
        shell: bash
        run: |
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            certutil -hashfile "nebulis-${{ matrix.platform.name }}.zip" SHA256 > "nebulis-${{ matrix.platform.name }}.zip.sha256"
          elif [ "${{ matrix.platform.os }}" = "macos-latest" ]; then
            shasum -a 256 "nebulis-${{ matrix.platform.name }}.tar.gz" > "nebulis-${{ matrix.platform.name }}.tar.gz.sha256"
          else
            sha256sum "nebulis-${{ matrix.platform.name }}.tar.gz" > "nebulis-${{ matrix.platform.name }}.tar.gz.sha256"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nebulis-${{ matrix.platform.name }}
          path: dist/*
          if-no-files-found: error

  publish-crate:
    name: Publish to crates.io
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Verify Cargo.toml version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          TAG_VERSION=${GITHUB_REF#refs/tags/v}

          if [ "$VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Version mismatch!"
            echo "Cargo.toml version: $VERSION"
            echo "Git tag version: $TAG_VERSION"
            exit 1
          fi

      - name: Publish to crates.io
        run: |
          cargo login ${{ secrets.CRATES_IO_TOKEN }}
          cargo publish --allow-dirty || echo "Publish failed, continuing..."

  create-release:
    name: Create GitHub Release
    needs: [build-release, publish-crate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir release-assets
          find artifacts -type f -exec cp {} release-assets/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
