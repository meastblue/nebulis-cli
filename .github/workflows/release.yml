name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build-and-release:
    name: Release ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: nebulis-linux-amd64

          - target: x86_64-apple-darwin
            os: macos-latest
            name: nebulis-darwin-amd64

          - target: aarch64-apple-darwin
            os: macos-latest
            name: nebulis-darwin-arm64

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: nebulis-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Prepare archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/nebulis.exe" "dist/${{ matrix.name }}"
          else
            cp "target/${{ matrix.target }}/release/nebulis" "dist/${{ matrix.name }}"
          fi
          cp README.md LICENSE dist/
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "../${{ matrix.name }}.zip" .
          else
            tar czf "../${{ matrix.name }}.tar.gz" .
          fi

      - name: Generate SHA-256
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            sha256sum ${{ matrix.name }}.zip > ${{ matrix.name }}.zip.sha256
          else
            sha256sum ${{ matrix.name }}.tar.gz > ${{ matrix.name }}.tar.gz.sha256
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ matrix.name }}.*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: dist/*
          if-no-files-found: error
